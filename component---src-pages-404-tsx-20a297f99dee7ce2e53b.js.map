{"version":3,"sources":["webpack:///./src/pages/404.tsx"],"names":["pageQuery","ErrorContent","ErrorCode","colors","lightgrey","ErrorDescription","midgrey","ErrorLink","NotFoundPage","props","edges","data","allMarkdownRemark","cardImage","config","siteUrl","header","childImageSharp","fixed","src","width","height","lang","title","name","content","property","facebook","twitter","split","toString","css","SiteHeader","outer","SiteNavMain","inner","isHome","id","className","style","textAlign","to","PostFeed","map","node","key","fields","slug","post"],"mappings":"mUA+BA,MAiEaA,EAAY,aAmCnBC,EAAe,CAAH,8NAoBZC,EAAY,kBAAH,oBAAG,CAAH,kBAGJC,IAAOC,UAHH,iHAcTC,EAAmB,iBAAH,oBAAG,CAAH,kBAGXF,IAAOG,QAHI,kHAchBC,EAAY,CAAH,6DAKAC,UAzJuCC,IACpD,MAAM,MAAEC,GAAUD,EAAME,KAAKC,kBAC7B,IAAIC,EAAa,GAAEC,IAAOC,UAAUN,EAAME,KAAKK,OAAOC,gBAAgBC,MAAMC,OACxE,MAAEC,EAAF,OAASC,GAAWZ,EAAME,KAAKK,OAAOC,gBAAgBC,MAE1D,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMI,KAAMR,IAAOQ,OACnB,yBACI,SAAQR,IAAOS,OAEnB,oBAAMC,KAAK,cAAcC,QAAS,QAClC,oBAAMC,SAAS,eAAeD,QAASX,IAAOS,QAC9C,oBAAMG,SAAS,UAAUD,QAAQ,YACjC,oBAAMC,SAAS,WAAWD,QAAU,SAAQX,IAAOS,QACnD,oBAAMG,SAAS,iBAAiBD,QAAS,QACzC,oBAAMC,SAAS,SAASD,QAASX,IAAOC,QAAU,QACjDD,IAAOa,UAAY,oBAAMD,SAAS,oBAAoBD,QAASX,IAAOa,WACvE,oBAAMH,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,SAAQX,IAAOS,QACpD,oBAAMC,KAAK,cAAcC,QAASX,IAAOC,QAAU,QACnD,oBAAMW,SAAS,sBAAsBD,QAAS,QAC7CX,IAAOc,SACN,oBACEJ,KAAK,eACLC,QAAU,IAAGX,IAAOc,QAAQC,MAAM,wBAAwB,KAG9D,oBAAML,KAAK,WAAWC,QAASZ,IAC/B,oBAAMW,KAAK,gBAAgBC,QAASZ,IACpC,oBAAMa,SAAS,iBAAiBD,QAASL,EAAMU,aAC/C,oBAAMJ,SAAS,kBAAkBD,QAASJ,EAAOS,cAEnD,YAAC,IAAD,KACE,sBAAQC,IAAG,YAAE,CAACC,IAAYC,OACxB,mBAAKF,IAAG,YAAE,CAACE,IAAOC,OAChB,mBAAKH,IAAKI,KACR,YAAC,IAAD,CAASC,QAAQ,OAIvB,oBAAMC,GAAG,YAAYN,IAAG,YAAE,CAACE,IAAOhC,IAAeqC,UAAU,iBACzD,mBAAKP,IAAG,YAAE,CAACI,OACT,uBAASI,MAAO,CAAEC,UAAW,WAC3B,YAACtC,EAAD,YACA,YAACG,EAAD,uBACA,YAAC,IAAD,CAAM0B,IAAKxB,EAAWkC,GAAG,KAAzB,2BAKF,mBAAKV,IAAKW,IAAUJ,UAAU,aAC3B5B,EAAMiC,IAAI,EAAGC,UACZ,YAAC,IAAD,CAAUC,IAAKD,EAAKE,OAAOC,KAAMC,KAAMJ,QAK/C,YAAC,IAAD","file":"component---src-pages-404-tsx-20a297f99dee7ce2e53b.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport React from 'react';\n\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { colors } from '../styles/colors';\nimport { inner, outer, PostFeed, SiteHeader, SiteNavMain } from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nimport config from '../website-config';\n\nimport { Footer } from '../components/Footer';\n\ninterface NotFoundTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst NotFoundPage: React.FC<NotFoundTemplateProps> = props => {\n  const { edges } = props.data.allMarkdownRemark;\n  let cardImage = `${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`\n  let { width, height } = props.data.header.childImageSharp.fixed;\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {`404 - ${config.title}`}\n        </title>\n        <meta name=\"description\" content={'404'} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`404 - ${config.title}`} />\n        <meta property=\"og:description\" content={'404'} />\n        <meta property=\"og:url\" content={config.siteUrl + '404'} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`404 - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + '404'} />\n        <meta property=\"twitter:description\" content={'404'} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta name=\"og:image\" content={cardImage} />\n        <meta name=\"twitter:image\" content={cardImage} />\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <header css={[SiteHeader, outer]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[outer, ErrorContent]} className=\"error-content\">\n          <div css={[inner]}>\n            <section style={{ textAlign: 'center' }}>\n              <ErrorCode>404</ErrorCode>\n              <ErrorDescription>Page not found</ErrorDescription>\n              <Link css={ErrorLink} to=\"/\">\n                Go to the front page â†’\n              </Link>\n            </section>\n\n            <div css={PostFeed} className=\"post-feed\">\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    header: file(relativePath: { eq: \"img/emptyrobot-background.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 1200, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    allMarkdownRemark(\n\n    filter: { frontmatter: { draft: { ne: true } } },\n    limit: 3, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            author\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ErrorContent = css`\n  padding: 14vw 4vw 6vw;\n\n  @media (max-width: 800px) {\n    padding-top: 24vw;\n  }\n\n  @media (max-width: 500px) {\n    padding-top: 28vw;\n  }\n\n  @media (min-width: 940px) {\n    .post-card {\n      margin-bottom: 0;\n      padding-bottom: 0;\n      border-bottom: none;\n    }\n  }\n`;\n\nconst ErrorCode = styled.h1`\n  margin: 0;\n  /* color: var(--lightgrey); */\n  color: ${colors.lightgrey};\n  font-size: 12vw;\n  line-height: 1em;\n  letter-spacing: -5px;\n  opacity: 0.75;\n\n  @media (max-width: 800px) {\n    font-size: 11.2rem;\n  }\n`;\n\nconst ErrorDescription = styled.p`\n  margin: 0;\n  /* color: var(--midgrey); */\n  color: ${colors.midgrey};\n  font-size: 3rem;\n  line-height: 1.3em;\n  font-weight: 400;\n\n  @media (max-width: 800px) {\n    margin: 5px 0 0 0;\n    font-size: 1.8rem;\n  }\n`;\n\nconst ErrorLink = css`\n  display: inline-block;\n  margin-top: 5px;\n`;\n\nexport default NotFoundPage;\n"],"sourceRoot":""}