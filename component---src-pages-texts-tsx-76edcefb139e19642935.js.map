{"version":3,"sources":["webpack:///(webpack)/buildin/module.js","webpack:///./src/pages/texts.tsx"],"names":["module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","_","require","PageTemplate","css","colors","darkmode","BList","pageQuery","TagsPage","props","console","log","data","tags","uniq","flatten","allMarkdownRemark","edges","map","edge","slug","node","fields","foo","castArray","tag","name","title","author","type","hidden","link","filter","cardImage","config","siteUrl","header","childImageSharp","fixed","src","width","height","content","property","facebook","twitter","split","toString","className","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","isPost","post","id","SiteMain","style","textAlign","color","PostFeed","key","to"],"mappings":"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","file":"component---src-pages-texts-tsx-76edcefb139e19642935.js","sourcesContent":["module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { graphql, Link } from 'gatsby';\nimport React from 'react';\n\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { colors } from '../styles/colors';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteQuote,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nimport { Footer } from '../components/Footer';\n\nimport { NoImage, PostFull, PostFullHeader, PostFullTitle } from '../templates/post';\n\nimport config from '../website-config';\n\nconst _ = require('lodash');\n\ninterface TagsTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst PageTemplate = css`\n  .site-main {\n    margin-top: 64px;\n    padding-bottom: 4vw;\n    background: #fff;\n  }\n\n  //@media (prefers-color-scheme: dark) {\n    .site-main {\n      /* background: var(--darkmode); */\n      background: ${colors.darkmode};\n    }\n  //}\n`;\n\n\nconst BList = styled.ul`\n  list-style-type:none;\n  columns: 2;\n  -webkit-columns: 2;\n  -moz-columns: 2;\n  width: 100%;\n\n  li {\n    display: inline-block;\n    width: 100%;\n  }\n\n  @media (max-width: 500px) {\n\n    columns: 1;\n    -webkit-columns: 1;\n    -moz-columns: 1;\n    text-align: center;\n  }\n\n`;\n\nconst TagsPage = props => {\n\n  console.log(props.data);\n  let tags = _.uniq(\n    _.flatten(\n      props.data.allMarkdownRemark.edges.map(edge => {\n        let slug = edge.node.fields.slug;\n        let foo = _.get(edge, 'node.frontmatter', [])\n        foo.slug = slug;\n        return _.castArray(foo);\n      }),\n    ),\n  );\n\n  tags = _.map(\n    tags, (tag) => {\n      console.log(\"TEXT TAG: \", tag);\n\n      let name = tag.title;\n\n      if(tag.author[0]) {\n        name = name + ' by ' + tag.author[0];\n      }\n\n      return {\n        type: tag.type, hidden: tag.hidden, link: tag.slug, name: name\n      };\n    }\n  );\n\n  tags = _.filter(tags, (tag) =>  {\n    return tag.type === \"text\";\n  });\n\n  tags = _.filter(tags, (tag) =>  {\n    return !tag.hidden;\n  });\n\n  let cardImage = `${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`\n  let { width, height } = props.data.header.childImageSharp.fixed;\n\n  console.log(tags);\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>{`Texts - ${config.title}`}</title>\n          <meta name=\"description\" content={'Texts'} />\n          <meta property=\"og:site_name\" content={config.title} />\n          <meta property=\"og:type\" content=\"website\" />\n          <meta property=\"og:title\" content={`Texts - ${config.title}`} />\n          <meta property=\"og:description\" content={'Texts'} />\n          <meta property=\"og:url\" content={config.siteUrl + 'Texts'} />\n          {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          <meta name=\"twitter:title\" content={`Texts - ${config.title}`} />\n          <meta name=\"twitter:url\" content={config.siteUrl + 'Texts'} />\n          <meta property=\"twitter:description\" content={'Texts'} />\n          {config.twitter && (\n            <meta\n              name=\"twitter:site\"\n              content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n            />\n          )}\n          <meta name=\"og:image\" content={cardImage} />\n          <meta name=\"twitter:image\" content={cardImage} />\n          <meta property=\"og:image:width\" content={width.toString()} />\n          <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper css={PageTemplate}>\n        <header className=\"site-archive-header no-image\" css={[SiteHeader, SiteArchiveHeader]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} isPost={true} post={{title: 'Texts'}} />\n            </div>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner]}>\n            <SiteHeaderContent className=\"post-full-header\">\n              <SiteTitle style={{textAlign:'center'}} className=\"post-full-title\">Texts</SiteTitle>\n              <SiteQuote style={{textAlign:'center', color: 'rgb(115, 138, 148)'}} className=\"site-quote\">\n                After you have chosen your words, they must be weaved together into a fine and delicate fabric. - Marcus Fabius Quintilianus\n              </SiteQuote>\n            </SiteHeaderContent>\n\n\n            <p>\n               Here is a collection of books and texts related to the topics explored by The Empty Robot.\n               These texts are not necessarily reflective of our views, and many times will even contradict each other.\n               They are here as a collection of influential, referenced, or interesting texts within the domains of philosophy, science, mindfulness, Buddhism, and more.\n            </p>\n\n            <div css={PostFeed} className=\"post-feed\">\n              <BList>\n              {tags.map((tag) => (\n                 <li key={tag.name} style={{}}>\n\n                    <Link to={`${tag.link}`}>\n                      {tag.name}\n                    </Link>\n                </li>\n              ))}\n              </BList>\n            </div>\n          </div>\n        </main>\n\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    header: file(relativePath: { eq: \"img/emptyrobot-background.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 1200, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n      allMarkdownRemark(\n        sort: { fields: [frontmatter___date], order: ASC }\n        filter: { frontmatter: { draft: { ne: true }, type: {eq: \"text\"}, hidden: {eq: false} } }\n      ) {\n        edges {\n          node {\n            excerpt\n            timeToRead\n            frontmatter {\n              title\n              type\n              tags\n              date\n              draft\n              excerpt\n              hidden\n              author\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n`;\n\nexport default TagsPage;\n"],"sourceRoot":""}