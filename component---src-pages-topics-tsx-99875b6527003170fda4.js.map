{"version":3,"sources":["webpack:///./src/pages/topics.tsx","webpack:///(webpack)/buildin/module.js"],"names":["_","require","PageTemplate","css","colors","darkmode","BList","pageQuery","TagsPage","props","edges","data","allMarkdownRemark","tags","uniq","flatten","map","edge","castArray","get","tag","name","count","cardImage","config","siteUrl","header","childImageSharp","fixed","src","width","height","title","content","property","facebook","twitter","split","toString","className","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","isPost","post","id","SiteMain","style","textAlign","PostFeed","key","to","kebabCase","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","l","i"],"mappings":"sTAoCA,MAAMA,EAAIC,EAAQ,QAaZC,EAAeC,YAAH,wFAUEC,IAAOC,SAVT,MAeZC,EAAQ,kBAAH,oBAAG,CAAH,kOAyGEC,EAAY,aAgCVC,UAlH+BC,IAC5C,MAAM,MAAEC,GAAUD,EAAME,KAAKC,kBAE7B,IAAIC,EAAOb,EAAEc,KACXd,EAAEe,QACAL,EAAMM,IAAIC,GACDjB,EAAEkB,UAAUlB,EAAEmB,IAAIF,EAAM,wBAAyB,QAK9DJ,EAAOb,EAAEgB,IACPH,EAAOO,IACE,CAACC,KAAMD,EAAKE,MAAO,KAI9B,IAAIC,EAAa,GAAEC,IAAOC,UAAUhB,EAAME,KAAKe,OAAOC,gBAAgBC,MAAMC,OACxE,MAAEC,EAAF,OAASC,GAAWtB,EAAME,KAAKe,OAAOC,gBAAgBC,MAE1D,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,yBAAS,YAAWJ,IAAOQ,OACzB,oBAAMX,KAAK,cAAcY,QAAS,WAClC,oBAAMC,SAAS,eAAeD,QAAST,IAAOQ,QAC9C,oBAAME,SAAS,UAAUD,QAAQ,YACjC,oBAAMC,SAAS,WAAWD,QAAU,YAAWT,IAAOQ,QACtD,oBAAME,SAAS,iBAAiBD,QAAS,WACzC,oBAAMC,SAAS,SAASD,QAAST,IAAOC,QAAU,WACjDD,IAAOW,UAAY,oBAAMD,SAAS,oBAAoBD,QAAST,IAAOW,WACvE,oBAAMd,KAAK,eAAeY,QAAQ,wBAClC,oBAAMZ,KAAK,gBAAgBY,QAAU,YAAWT,IAAOQ,QACvD,oBAAMX,KAAK,cAAcY,QAAST,IAAOC,QAAU,WACnD,oBAAMS,SAAS,sBAAsBD,QAAS,WAC7CT,IAAOY,SACN,oBACEf,KAAK,eACLY,QAAU,IAAGT,IAAOY,QAAQC,MAAM,wBAAwB,KAG9D,oBAAMhB,KAAK,WAAWY,QAASV,IAC/B,oBAAMF,KAAK,gBAAgBY,QAASV,IACpC,oBAAMW,SAAS,iBAAiBD,QAASH,EAAMQ,aAC/C,oBAAMJ,SAAS,kBAAkBD,QAASF,EAAOO,cAErD,YAAC,IAAD,CAASnC,IAAKD,GACZ,sBAAQqC,UAAU,+BAA+BpC,IAAG,YAAE,CAACqC,IAAYC,OACjE,mBAAKtC,IAAG,YAAE,CAACuC,IAAOC,OAChB,mBAAKxC,IAAKyC,KACR,YAAC,IAAD,CAASC,QAAQ,EAAOC,QAAQ,EAAMC,KAAM,CAACf,MAAO,eAI1D,oBAAMgB,GAAG,YAAY7C,IAAG,YAAE,CAAC8C,IAAUP,OACnC,mBAAKvC,IAAG,YAAE,CAACyC,OACT,YAAC,IAAD,CAAmBL,UAAU,oBAC3B,YAAC,IAAD,CAAWW,MAAO,CAACC,UAAU,UAAWZ,UAAU,mBAAlD,WAGF,mBAAKpC,IAAKiD,IAAUb,UAAU,aAC5B,YAACjC,EAAD,KACGO,EAAKG,IAAKI,GACR,kBAAIiC,IAAKjC,EAAIC,MAEV,YAAC,IAAD,CAAMiC,GAAK,WAAUtD,EAAEuD,UAAUnC,EAAIC,OAClCD,EAAIC,YASrB,YAAC,IAAD,U,mBClKRmC,EAAOC,QAAU,SAASD,GAoBzB,OAnBKA,EAAOE,kBACXF,EAAOG,UAAY,aACnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACvCQ,YAAY,EACZ7C,IAAK,WACJ,OAAOqC,EAAOS,KAGhBH,OAAOC,eAAeP,EAAQ,KAAM,CACnCQ,YAAY,EACZ7C,IAAK,WACJ,OAAOqC,EAAOU,KAGhBV,EAAOE,gBAAkB,GAEnBF","file":"component---src-pages-topics-tsx-99875b6527003170fda4.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport React from 'react';\n\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { colors } from '../styles/colors';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteQuote,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nimport { Footer } from '../components/Footer';\n\nimport { NoImage, PostFull, PostFullHeader, PostFullTitle } from '../templates/post';\n\nimport config from '../website-config';\n\nconst _ = require('lodash');\n\ninterface TagsTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst PageTemplate = css`\n  .site-main {\n    margin-top: 64px;\n    padding-bottom: 4vw;\n    background: #fff;\n  }\n\n  //@media (prefers-color-scheme: dark) {\n    .site-main {\n      /* background: var(--darkmode); */\n      background: ${colors.darkmode};\n    }\n  //}\n`;\n\nconst BList = styled.ul`\n  list-style-type:none;\n  columns: 2;\n  -webkit-columns: 2;\n  -moz-columns: 2;\n  width: 100%;\n\n  li {\n    display: inline-block;\n    width: 100%;\n  }\n\n  @media (max-width: 500px) {\n\n    columns: 1;\n    -webkit-columns: 1;\n    -moz-columns: 1;\n    text-align: center;\n  }\n\n`;\n\n\nconst TagsPage: React.FC<TagsTemplateProps> = props => {\n  const { edges } = props.data.allMarkdownRemark;\n\n  let tags = _.uniq(\n    _.flatten(\n      edges.map(edge => {\n        return _.castArray(_.get(edge, 'node.frontmatter.tags', []));\n      }),\n    ),\n  );\n\n  tags = _.map(\n    tags, (tag) => {\n      return {name: tag, count: 0};\n    }\n  );\n\n  let cardImage = `${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`\n  let { width, height } = props.data.header.childImageSharp.fixed;\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>{`Topics - ${config.title}`}</title>\n          <meta name=\"description\" content={'Topics'} />\n          <meta property=\"og:site_name\" content={config.title} />\n          <meta property=\"og:type\" content=\"website\" />\n          <meta property=\"og:title\" content={`Topics - ${config.title}`} />\n          <meta property=\"og:description\" content={'Topics'} />\n          <meta property=\"og:url\" content={config.siteUrl + 'Topics'} />\n          {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          <meta name=\"twitter:title\" content={`Topics - ${config.title}`} />\n          <meta name=\"twitter:url\" content={config.siteUrl + 'Topics'} />\n          <meta property=\"twitter:description\" content={'Topics'} />\n          {config.twitter && (\n            <meta\n              name=\"twitter:site\"\n              content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n            />\n          )}\n          <meta name=\"og:image\" content={cardImage} />\n          <meta name=\"twitter:image\" content={cardImage} />\n          <meta property=\"og:image:width\" content={width.toString()} />\n          <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper css={PageTemplate}>\n        <header className=\"site-archive-header no-image\" css={[SiteHeader, SiteArchiveHeader]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} isPost={true} post={{title: 'Topics'}} />\n            </div>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner]}>\n            <SiteHeaderContent className=\"post-full-header\">\n              <SiteTitle style={{textAlign:'center'}} className=\"post-full-title\">Topics</SiteTitle>\n            </SiteHeaderContent>\n\n            <div css={PostFeed} className=\"post-feed\">\n              <BList>\n                {tags.map((tag) => (\n                   <li key={tag.name}>\n\n                      <Link to={`/topics/${_.kebabCase(tag.name)}`}>\n                        {tag.name}\n                      </Link>\n                  </li>\n                ))}\n              </BList>\n            </div>\n          </div>\n        </main>\n\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\n\nexport const pageQuery = graphql`\n  query {\n    header: file(relativePath: { eq: \"img/emptyrobot-background.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 1200, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n      allMarkdownRemark(\n        sort: { fields: [frontmatter___date], order: ASC }\n        filter: { frontmatter: { draft: { ne: true } } }\n      ) {\n        edges {\n          node {\n            excerpt\n            timeToRead\n            frontmatter {\n              title\n              tags\n              date\n              draft\n              excerpt\n            }\n          }\n        }\n      }\n    }\n`;\n\nexport default TagsPage;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}